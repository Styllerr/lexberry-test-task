[{"E:\\Repository\\lexberry-test-task\\src\\index.js":"1","E:\\Repository\\lexberry-test-task\\src\\App.js":"2","E:\\Repository\\lexberry-test-task\\src\\components\\Client\\Client.js":"3","E:\\Repository\\lexberry-test-task\\src\\api.js":"4","E:\\Repository\\lexberry-test-task\\src\\components\\applicants\\ApplicantsList.js":"5","E:\\Repository\\lexberry-test-task\\src\\components\\applicants\\ApplicantsItem.js":"6","E:\\Repository\\lexberry-test-task\\src\\components\\applicants\\ApplicantForm.js":"7"},{"size":197,"mtime":1607968594386,"results":"8","hashOfConfig":"9"},{"size":249,"mtime":1607971128114,"results":"10","hashOfConfig":"9"},{"size":3249,"mtime":1608048646679,"results":"11","hashOfConfig":"9"},{"size":1091,"mtime":1607985125559,"results":"12","hashOfConfig":"9"},{"size":1285,"mtime":1608085304717,"results":"13","hashOfConfig":"9"},{"size":759,"mtime":1608049724658,"results":"14","hashOfConfig":"9"},{"size":10182,"mtime":1608119644545,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"k3wqjr",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Repository\\lexberry-test-task\\src\\index.js",[],["32","33"],"E:\\Repository\\lexberry-test-task\\src\\App.js",[],"E:\\Repository\\lexberry-test-task\\src\\components\\Client\\Client.js",["34","35"],"import React, { useEffect, useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport api from '../../api';\r\nimport ApplicantsList from '../applicants/ApplicantsList';\r\n\r\nfunction Client() {\r\n    const [clientsList, setClientsList] = useState([]);\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [value, setValue] = useState(null);\r\n    const [applicants, setApplicants] = useState([]);\r\n\r\n    const fetchClients = () => {\r\n        inputValue.length < 4\r\n            ? api.get('/clients')\r\n                .then(resp => setClientsList(resp.data.items))\r\n            : api.get('/clients?search[name]=' + inputValue)\r\n                .then(resp => setClientsList(resp.data.items))\r\n    }\r\n    const fetchApplicants = (id) => {\r\n        api.get('/applicants?filter[client:id]=' + id)\r\n                .then(resp => setApplicants(resp.data.items))\r\n    }\r\n    const filterOptions = createFilterOptions({\r\n        limit: 10,\r\n    });\r\n    useEffect(() => {\r\n        fetchClients();\r\n    }, [])\r\n    useEffect(() => {\r\n        fetchClients();\r\n    }, [inputValue, value])\r\n\r\n    useEffect(() => {\r\n        value\r\n            ? fetchApplicants(value.id)\r\n            : setApplicants([])\r\n    }, [value])\r\n    return (\r\n        <>\r\n            <Paper style={styles.paperClient}>\r\n                <h2>Клієнт</h2>\r\n                <Autocomplete\r\n                    value={value}\r\n                    onChange={(event, newValue) => {\r\n                        setValue(newValue);\r\n                    }}\r\n                    inputValue={inputValue}\r\n                    onInputChange={(event, newInputValue) => {\r\n                        setInputValue(newInputValue);\r\n                    }}\r\n                    filterOptions={filterOptions}\r\n                    id='combo-box'\r\n                    options={clientsList}\r\n                    getOptionLabel={(option) => option.label}\r\n                    getOptionSelected={(option) => option.label}\r\n                    size='small'\r\n                    style={{ width: 300 }}\r\n                    renderInput={(params) => <TextField {...params} label='Пошук/вибір клієнта' variant=\"outlined\" />}\r\n                />\r\n                {value\r\n                    ? <div>\r\n                        <h3>\r\n                            {value.name}\r\n                        </h3>\r\n                        <p>\r\n                            Телефон. {value.phone}\r\n                        </p>\r\n                        <Button variant=\"contained\" color=\"primary\">\r\n                            Зберегти заявку\r\n                        </Button>\r\n                    </div>\r\n                    : null}\r\n            </Paper>\r\n            <Paper>\r\n                <ApplicantsList client={value} applicants={applicants}/>\r\n            </Paper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Client\r\n\r\nconst styles = {\r\n    paperClient: {\r\n        marginBottom: '30px',\r\n        padding: '15px 25px 15px'\r\n    }\r\n}","E:\\Repository\\lexberry-test-task\\src\\api.js",[],"E:\\Repository\\lexberry-test-task\\src\\components\\applicants\\ApplicantsList.js",[],"E:\\Repository\\lexberry-test-task\\src\\components\\applicants\\ApplicantsItem.js",[],"E:\\Repository\\lexberry-test-task\\src\\components\\applicants\\ApplicantForm.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":33,"column":8,"nodeType":"42","endLine":33,"endColumn":10,"suggestions":"43"},{"ruleId":"40","severity":1,"message":"41","line":36,"column":8,"nodeType":"42","endLine":36,"endColumn":27,"suggestions":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchClients'. Either include it or remove the dependency array.","ArrayExpression",["47"],["48"],"no-global-assign","no-unsafe-negation",{"desc":"49","fix":"50"},{"desc":"51","fix":"52"},"Update the dependencies array to be: [fetchClients]",{"range":"53","text":"54"},"Update the dependencies array to be: [fetchClients, inputValue, value]",{"range":"55","text":"56"},[1256,1258],"[fetchClients]",[1316,1335],"[fetchClients, inputValue, value]"]